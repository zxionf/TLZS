package com.zyx.kga.lv;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.ImageButton;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.InputListener;
import com.badlogic.gdx.scenes.scene2d.InputEvent;


public class Lv0gdx implements ApplicationListener
{
    float size = 3200;
    final int ipi = 80;

    BitmapFont font,font2;
    SpriteBatch batch2;
    
    TextureRegion p;
    
    Texture background;
    Texture texture ;

    SpriteBatch batch;
    Sprite sprite = new Sprite();
    ShapeRenderer shapeRenderer;
    OrthographicCamera camera;
    
    //按钮
    Stage stage;
    Texture tex;
    Image img;
    ImageButton btn;
    TextureRegionDrawable up,down;
    TextureRegion buttonup,buttondown;
    Music music;
    
    
    float x= 0, y= 0;
    int  c = 1,c2 = 1;
    
    float time;

    @Override
    public void create()
    {
        //BGM
        music = Gdx.audio.newMusic(Gdx.files.internal("music/are_you_lost.mp3"));
        music.play();
        
        //对话文字
        batch2 = new SpriteBatch();
        font2 = new BitmapFont(Gdx.files.internal("font/font-cn.fnt"),Gdx.files.internal("font/font-cn.png"),false);

        font = new BitmapFont(Gdx.files.internal("font/font-cn.fnt"),Gdx.files.internal("font/font-cn.png"),false);
        //三倍
        //font.setScale(2);

        background = new Texture(Gdx.files.internal("level/a/pict/bg/lv0bg1.png"));
        texture  = new Texture(Gdx.files.internal("x.png"));

        batch = new SpriteBatch();
        camera = new OrthographicCamera();
        

        configureCamera();

        shapeRenderer = new ShapeRenderer();
        
        
        //按钮
        
        stage = new Stage();

        tex = new Texture(Gdx.files.internal("UI/ui_1.png"));
        TextureRegion[][] temp = TextureRegion.split(tex,20,20);
        buttonup = temp[5][0];
        buttondown = temp[5][1];
        up = new TextureRegionDrawable(buttonup);
        up.setMinWidth(100);
        up.setMinHeight(100);
        down = new TextureRegionDrawable(buttondown);
        down.setMinWidth(100);
        down.setMinHeight(100);
        btn = new ImageButton(up,down);
        btn.setPosition(50,1000);

        btn.addListener(new InputListener(){
                public boolean touchDown(InputEvent event,float x,float y,int pointer,int button){

                    return true;
                }
                public void touchUp(InputEvent event,float x, float y, int pointer, int button){
                    btn.setPosition(0,0);
                    super.touchUp(event,x,y,pointer,button);
                }
            });

        stage.addActor(btn);

        Gdx.input.setInputProcessor(stage);
        
        

    }

    @Override
    public void render()
    {        
        Gdx.gl.glClearColor(1, 1, 1, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        camera.update();
        batch.setProjectionMatrix(camera.combined);

        //按钮
        stage.act();
        stage.draw();
        
        float viewhight,viewwidth;
        viewhight  = camera.viewportHeight;
        viewwidth = camera.viewportWidth;
        
        batch.begin();

        batch.draw(background,0,0);

        //int op =  32;
        //font.setColor(0,0,0,0.8f);
        //font.draw(batch,"v4",4,op-4);
        
        //font.setColor(Color.GREEN);
        //font.draw(batch, "v4",0 , op);

            
        
        font.setColor(Color.GREEN);
        font.draw(batch,"x"+(int)x+"y"+(int)y,x,y);
        
        font.setScale(8);
        
        batch.draw(texture, x, y,ipi, ipi);
        
       
        batch.end();

        
        shapeRenderer.setProjectionMatrix(camera.combined);
        shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
        //角色左名字背景
        shapeRenderer.setColor(Color.GRAY);
        shapeRenderer.rect(viewwidth/4,viewhight*0.21f,16*5*3,16*5);
        shapeRenderer.setColor(0.49f,0.25f,0,1f);
        shapeRenderer.rect((viewwidth/4)-20,viewhight*0.21f+20,16*5*3,16*5);
        //角色右名字背景
        shapeRenderer.setColor(Color.GRAY);
        shapeRenderer.rect(viewwidth/4*3,viewhight*0.21f,-16*5*3,16*5);
        shapeRenderer.setColor(0.49f,0.25f,0,1f);
        shapeRenderer.rect((viewwidth/4*3)-20,viewhight*0.21f+20,-16*5*3,16*5);
        //对话框
        shapeRenderer.setColor(1,1,1,0.1f);
        shapeRenderer.rect(0,0,viewwidth,viewhight*0.21f);
        //shapeRenderer.setColor(0.49f,0.25f,0,0.8f);
        //shapeRenderer.rect((viewwidth/4)-20,20,viewwidth/2,viewhight*0.21f);
        
        //线
        shapeRenderer.setColor(Color.GREEN);
        shapeRenderer.line(0,0,x,y);
        shapeRenderer.end();
        
        
        batch2.begin();
        batch2.setProjectionMatrix(camera.combined);
        //对话文字
        font2.setColor(Color.WHITE);
        font2.setScale(5);
        font2.draw(batch2,"WXW",viewwidth/4-20,viewhight*0.21f+16*5+20);
        font2.draw(batch2,"HPZH",viewwidth/4*3-20-16*5*3,viewhight*0.21f+16*5+20);
        font2.draw(batch2,"这里是dialog",viewwidth/4,viewhight*0.21f);
        

        batch2.draw(texture, x, y,ipi, ipi);
        
        batch2.end();

        if((int) y+ipi >= camera.viewportHeight){
            c = -1;
        }if((int) y < 0){
            c = 1;
        }if((int) x+ipi >= camera.viewportWidth){
            c2 = -1;
        }if((int) x < 0){
            c2 = 1;
        }

        switch(c){
            case 1:
                y = y + 300*Gdx.graphics.getDeltaTime();
                break;
            case -1:
                y = y - 300*Gdx.graphics.getDeltaTime();
                break;
            default: 
        }switch(c2){
            case 1:
                x = x + 300*Gdx.graphics.getDeltaTime();
                break;
            case -1:
                x = x - 300*Gdx.graphics.getDeltaTime();
                break;
            default: 
        }
        
        

        
        
        /*
         if(Gdx.input.isTouched()){
         size = y;
         configureCamera();
         camera.update();
         }*/
        //camera.translate(0,~5*Gdx.graphics.getDeltaTime());


    }

    private void configureCamera()
    {
        if (Gdx.graphics.getHeight() < Gdx.graphics.getWidth())
            camera.setToOrtho(false, size, size * Gdx.graphics.getHeight() / Gdx.graphics.getWidth());
        else
            camera.setToOrtho(false, size * Gdx.graphics.getWidth() / Gdx.graphics.getHeight(), size);
    }
    @Override
    public void dispose()
    {
        shapeRenderer.dispose();
    }

    @Override
    public void resize(int width, int height)
    {
        configureCamera();
    }

    @Override
    public void pause()
    {
    }

    @Override
    public void resume()
    {
    }
}
